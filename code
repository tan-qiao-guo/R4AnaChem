####################################################
##磷酸的pH值，解方程--------------------------------
Ka1 = 7.6E-3
Ka2 = 6.3E-8
Ka3 = 4.4E-13
c = 0.20

f <- function(H) {
  #将分母命名为D
  D = H^3 + H^2 * Ka1 + H * Ka1 * Ka2 + Ka1 * Ka2 * Ka3
  H - (H^2 * Ka1* c / D + 2 * H * Ka1 * Ka2 * c / D + 3 * Ka1 * Ka2 * Ka3 * c / D)
}
  
H <- uniroot(f, interval = c(0, 0.6), tol = 10^-20)
#根据H+浓度计算pH
pH <- -log10(H$root)
pH



####################################################
##H3PO4分布分数图----

library(tidyverse)

Ka1 = 7.6E-3
Ka2 = 6.3E-8
Ka3 = 4.4E-13
pH = seq(0, 14, length.out = 100)

H = 10^(-pH)
D = H^3 + H^2 * Ka1 + H * Ka1 * Ka2 + Ka1 * Ka2 * Ka3

delta_0 = Ka1 * Ka2 * Ka3 / D
delta_1 = H * Ka1 * Ka2 / D
delta_2 = H^2 * Ka1 / D
delta_3 = H^3 / D

df_delta = data.frame(pH, delta_0, delta_1, delta_2, delta_3)

ggplot(df_delta, aes(x = pH))+
  theme_bw()+
  geom_line(aes(y = delta_0), linetype = 1)+
  geom_line(aes(y = delta_1), linetype = 2)+
  geom_line(aes(y = delta_2), linetype = 3)+
  geom_line(aes(y = delta_3), linetype = 4)+
  scale_x_continuous(breaks = seq(0, 14, 2))+
  annotate(geom = "text", x = 1, y=0.95, label = expression(H[3]~PO[4]))+
  annotate(geom = "text", x = 4.8, y=0.95, label = expression(H[2]~PO[4]^"-"))+
  annotate(geom = "text", x = 9.8, y=0.95, label = expression(HPO[4]^"2-"))+
  annotate(geom = "text", x = 13, y=0.95, label = expression(PO[4]^"3-"))+
  ylab(expression(paste("分布分数", delta)))
  
ggsave("H3PO4分布分数.png", width = 500/90, height = 279/90, dpi = 600, units = "in")  


#############################################################
#络合滴定曲线
#假设同浓度滴定，体积的变化1/(1+a)

#设定金属离子和EDTA溶液的分析浓度
c = 0.1
#设定条件稳定常数值
KMY = 1E14

#设定一系列滴定分数，在0~2之间取200个点
a_seq = seq(0.000, 2, length.out = 200)

#设定一个名为pM的长度为200的向量，用于储存随后计算所得的pM值，200个pM值与200个滴定分数值对应。
pM = numeric(200)

#针对每一个滴定分数值，需通过解方程计算对应的pM值，此处运用循环语句
for (i in 1 : 200) {
  f <- function(x) {
  a <<- a_seq[i]
  KMY <<- KMY
  c <<- c
  #此为络合滴定曲线方程
  KMY*x^2+(KMY*c/(1+a)*(a-1)+1)*x-c/(1+a)
  }
  #将方程的根存入名为RT的变量  
  RT = uniroot(f, interval = c(1E-20, 0.1), tol=1E-20)
  #计算pM值，存入向量pM相应位置
  pM[i] = -log10((RT$root))
  
}

#将以上200个滴定分数值与对应的pM值合并成数据表，命名为luohe
luohe <- data.frame(a = a_seq, pM = pM)

#调用作图所需软件包ggplot2
library(tidyverse)

#作图
ggplot(luohe, aes(x = a, y = pM))+
  theme_bw()+
  geom_line()+
  xlab("滴定分数")+
  scale_x_continuous(breaks = seq(0, 2, 0.2))+
  scale_y_continuous(breaks = seq(0, 16, 2))


ggsave("complexation titration curve.png", width = 399/90, height = 310/90, dpi = 600, units = "in")


########################################################################
##误差传递--------------------------------------------------------------
library(tidyverse)
set.seed(114)
m1 <- rnorm(100, mean = 0, sd = 0.10)
m2 <- rnorm(100, mean = 2, sd = 0.10)
r1 <- rnorm(100, mean = 2, sd = 0.20)
r2 <- rnorm(100, mean = 2, sd = 0.1414)
m <- m2 - m1

d <- data.frame(id =1:100, m1, m2, r1, r2, m)

d1 <- gather(d, key="id")
d1$variable <- factor(d1$id, 
                      levels = c("m1", "m2", "r1", "r2","m"),
                      labels =c("m1", "m2", "r1", "r2","m2 - m1"))

ggplot(d1, aes(x=variable, y= value))+
  theme_bw()+
  geom_violin()+
  geom_jitter(width = 0.15, shape =1, size =1)+
  annotate(geom ="text", x = 1.1, y = 0.4, label=expression( "  平均值 = 0 \n标准偏差 = 0.10") , size =3)+
  annotate(geom ="text", x = 2.1, y = 2.5, label=expression( "  平均值 = 2 \n标准偏差 = 0.10") , size =3)+
  annotate(geom ="text", x = 3.1, y = 2.8, label=expression( "  平均值 = 2 \n标准偏差 = 0.20") , size =3) +
  annotate(geom ="text", x = 4.1, y = 1.3, label=expression( "  平均值 = 2 \n标准偏差 = 0.14") , size =3) +
  scale_y_continuous(limits = c(-0.5,3.5))+
  xlab("")+
  ylab("数值")

ggsave("error_2.png", width = 415/90, height = 422/90, dpi =600, units = "in")



###############################################
##T检验 系统误差 置信区间-------------------------------------------
library(tidyverse)
library(ggrepel)

x <- c(10.74, 10.77,10.77,10.77,10.81,10.82,10.73,10.86,10.81)

fit <- t.test(x, mu = 10.77, conf.level = 0.95)

CI <- fit$conf.int[1:2]

ggplot(data.frame(x), aes(x, y=0))+
  theme_minimal()+
  geom_rect(xmin=CI[1], xmax=CI[2], ymin=-0.01, ymax=0.01, fill="grey90",color="black", size = 0.1)+
  geom_point(alpha = 1/3)+
  geom_text_repel(label=x, nudge_y=0.01)+
  geom_point(x=10.77, y=0, shape= 1, size =4, stroke =1.5)+
  annotate(x=10.77, y=-0.024, geom="text", label="理论值\n10.77",fontface="bold")+
  annotate(x=10.80, y=-0.02, geom="text", label="平均值的95%置信区间", size = 3)+
  ylim(-0.1, 0.1)+
  theme(axis.text = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank())+
  geom_hline(yintercept = 0)+
  annotate(x=10.73, y=0.04, geom="text", label="(a)",fontface="bold")

ggsave("置信区间.png", width=529/90, height = 276/90, dpi = 600, units = "in")

####----------------------------------------------------------------------------
#另外假设一组数据存在系统误差，奇数位上的数减去1
x <- c(9.74, 10.77,9.77,10.77,9.81,10.82,9.73,10.86,9.81)
n = length(x)

fit <- t.test(x, mu = 10.77, conf.level = 0.95)
t.test(x, mu = 10.77, conf.level = 0.95)


ggplot(data.frame(x), aes(x, y=0))+
  theme_minimal()+
  geom_rect(xmin=fit$conf.int[1], xmax=fit$conf.int[2], ymin=-0.01, ymax=0.01, fill="grey90",color="black", size = 0.1)+
  geom_point(alpha = 1/3)+
  geom_text_repel(label=x, nudge_y=0.01)+
  geom_point(x=10.77, y=0, shape= 1, size =4, stroke =1.5)+
  annotate(x=10.77, y=-0.024, geom="text", label="理论值\n10.77",fontface="bold")+
  annotate(x=10.25, y=-0.02, geom="text", label="平均值的95%置信区间", size = 3)+
  ylim(-0.1, 0.1)+
  theme(axis.text = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank())+
  geom_hline(yintercept = 0)+
  annotate(x=9.73, y=0.04, geom="text", label="(b)",fontface="bold")

ggsave("置信区间_2.png", width=529/90, height = 276/90, dpi = 600, units = "in")

##-------------------------------------------------------------------------------
##T检验 未采用可视化方案
x <- c(10.74, 10.77,10.77,10.77,10.81,10.82,10.73,10.86,10.81)

t.test(x, mu = 10.77, conf.level = 0.95)

fit_x <- seq(-4,4, length.out=100)
fit_y <- dt(fit_x, df=8)

d <- data.frame(fit_x, fit_y)
ggplot(d, aes(fit_x, fit_y))+
  theme_bw()+
  geom_line()+
  
  geom_vline(xintercept = 0, linetype = 2, size=0.7)+
  geom_point(data=data.frame(x),aes((x-10.77)/sd(x)), y=0, alpha=1/3)+
  xlab(expression(italic(t)==frac("测定值-理论值","样本标准偏差")))+
  ylab("概率密度")+
  geom_ribbon(data=subset(d, fit_x < qt(0.025, 8) ),aes(ymin=0,ymax=fit_y), fill = "grey80")+
  geom_ribbon(data=subset(d, fit_x > qt(0.975, 8) ),aes(ymin=0,ymax=fit_y), fill = "grey80")+
  annotate(x=-2.71, y=0.01, geom="text", label="2.5%", size=2.5)+
  annotate(x=2.73, y=0.01, geom="text", label="2.5%", size =2.5)+
  annotate(x=2.2, y=0.25, geom="text", label="自由度 = 8")

ggsave("t分布.png", width = 332/90, height = 417/90, dpi =600, units = "in")

